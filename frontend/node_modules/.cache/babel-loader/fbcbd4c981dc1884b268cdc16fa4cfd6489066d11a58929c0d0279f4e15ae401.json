{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nimport { TextGeometry, FontLoader, mergeVertices } from 'three-stdlib';\nconst types = ['string', 'number'];\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  smooth,\n  children,\n  ...props\n}, fref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const ref = React.useRef(null);\n  const font = suspend(async () => {\n    let data = typeof _font === 'string' ? await (await fetch(_font)).json() : _font;\n    let loader = new FontLoader();\n    return loader.parse(data);\n  }, [_font]);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  React.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\nexport { Text3D };","map":{"version":3,"names":["_extends","React","useMemo","extend","suspend","TextGeometry","FontLoader","mergeVertices","types","getTextFromChildren","children","label","rest","Children","forEach","child","includes","push","Text3D","forwardRef","font","_font","letterSpacing","lineHeight","size","height","bevelThickness","bevelSize","bevelEnabled","bevelOffset","bevelSegments","curveSegments","smooth","props","fref","RenamedTextGeometry","ref","useRef","data","fetch","json","loader","parse","opts","args","useLayoutEffect","current","geometry","computeVertexNormals","useImperativeHandle","createElement"],"sources":["C:/Users/prati/Desktop/NASA/frontend/node_modules/@react-three/drei/core/Text3D.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nimport { TextGeometry, FontLoader, mergeVertices } from 'three-stdlib';\n\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  smooth,\n  children,\n  ...props\n}, fref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const ref = React.useRef(null);\n  const font = suspend(async () => {\n    let data = typeof _font === 'string' ? await (await fetch(_font)).json() : _font;\n    let loader = new FontLoader();\n    return loader.parse(data);\n  }, [_font]);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  React.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\nexport { Text3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}